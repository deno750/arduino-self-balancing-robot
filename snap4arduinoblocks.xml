<blocks app="Snap4Arduino 1.2.5
, http://snap4arduino.rocks" version="1"><block-definition s="PID costants: kp %&apos;kp&apos; ki %&apos;ki&apos; kd %&apos;kd&apos;" type="command" category="arduino"><header></header><code></code><translations></translations><inputs><input type="%n">0.0</input><input type="%n">0.0</input><input type="%n">0.0</input></inputs><script><block s="doRun"><block s="reportJSFunction"><list><l>kp</l><l>ki</l><l>kd</l></list><l>var floatArr = new Float32Array(3); &#xD;floatArr[0] = kp;&#xD;floatArr[1] = ki;&#xD;floatArr[2] = kd;&#xD;var buff = new Int8Array(floatArr.buffer);&#xD;this.arduino.board.sp.write(new Buffer([0XF0, 0x09, buff[0], buff[1], buff[2], buff[3],buff[4], buff[5], buff[6], buff[7], buff[8], buff[9], buff[10], buff[11], 0xF7]));</l></block><list><block var="kp"/><block var="ki"/><block var="kd"/></list></block></script></block-definition><block-definition s="MPU Offests: XGyro %&apos;XGyro&apos; YGyro %&apos;YGyro&apos; ZGyro %&apos;ZGyro&apos; XAccel %&apos;XAccel&apos; YAccel %&apos;YAccel&apos; ZAccel %&apos;ZAccel&apos;" type="command" category="arduino"><header></header><code></code><translations></translations><inputs><input type="%n">0.0</input><input type="%n">0.0</input><input type="%n">0.0</input><input type="%n">0.0</input><input type="%n">0.0</input><input type="%n">0.0</input></inputs><script><block s="doRun"><block s="reportJSFunction"><list><l>XGyro</l><l>YGyro</l><l>ZGyro</l><l>XAccel</l><l>YAccel</l><l>ZAccel</l></list><l>this.arduino.board.sp.write(new Buffer([0XF0, 0x1A, XGyro, XGyro &gt;&gt; 8, YGyro, YGyro &gt;&gt; 8, ZGyro, ZGyro &gt;&gt; 8, XAccel, XAccel &gt;&gt; 8, YAccel, YAccel &gt;&gt; 8, ZAccel, ZAccel &gt;&gt; 8,0xF7]));</l></block><list><block var="XGyro"/><block var="YGyro"/><block var="ZGyro"/><block var="XAccel"/><block var="YAccel"/><block var="ZAccel"/></list></block></script></block-definition><block-definition s="l298n PIN: ENA %&apos;ENA&apos; IN1 %&apos;IN1&apos; IN2 %&apos;IN2&apos; IN3 %&apos;IN3&apos; IN4 %&apos;IN4&apos; ENB %&apos;ENB&apos; Motor Speed Factor: left %&apos;speedFactorLeft&apos; % right %&apos;speedFactorRight&apos; %" type="command" category="arduino"><header></header><code></code><translations></translations><inputs><input type="%n"></input><input type="%n"></input><input type="%n"></input><input type="%n"></input><input type="%n"></input><input type="%n"></input><input type="%n">100</input><input type="%n">100</input></inputs><script><block s="doRun"><block s="reportJSFunction"><list><l>ENA</l><l>IN1</l><l>IN2</l><l>IN3</l><l>IN4</l><l>ENB</l><l>speedFactorLeft</l><l>speedFactorRight</l></list><l>if (ENA === IN1 || ENA === IN2 || ENA === IN3 || ENA === IN4 || ENA === ENB || IN1 == IN2 || IN1 == IN3 || IN1 == IN4 ||&#xD;IN1 === ENB || IN2 === IN3 || IN2 === IN4 || IN2 === ENB || IN3 === IN4 || IN3 === ENB || IN4 === ENB) {&#xD;     throw new TypeError("Pin values must be all different!");&#xD;}&#xD;function checkDigitalPin(value) {&#xD;    if (value &lt; 0 || value &gt; 13) {&#xD;        throw new TypeError(value + " is not a valid pin!");&#xD;    }&#xD;}&#xD;checkDigitalPin(IN1);&#xD;checkDigitalPin(IN2);&#xD;checkDigitalPin(IN3);&#xD;checkDigitalPin(IN4);&#xD;if (speedFactorLeft &lt; 0 || speedFactorLeft &gt; 100 || speedFactorRight &lt; 0 || speedFactorRight &gt; 100) {&#xD;     throw new TypeError("Speed factors must be &gt; 0 and &lt; 100!");&#xD;}&#xD;this.arduino.board.sp.write(new Buffer([0XF0, 0x0B, ENA, IN1, IN2, IN3, IN4, ENB,speedFactorLeft, speedFactorRight, 0xF7]));</l></block><list><block var="ENA"/><block var="IN1"/><block var="IN2"/><block var="IN3"/><block var="IN4"/><block var="ENB"/><block var="speedFactorLeft"/><block var="speedFactorRight"/></list></block></script></block-definition><block-definition s="Angle of Balance %&apos;angle&apos;" type="command" category="arduino"><header></header><code></code><translations></translations><inputs><input type="%n"></input></inputs><script><block s="doRun"><block s="reportJSFunction"><list><l>angle</l></list><l>var floatArr = new Float32Array(1); &#xD;floatArr[0] = angle;&#xD;var buff = new Int8Array(floatArr.buffer);&#xD;this.arduino.board.sp.write(new Buffer([0XF0, 0x0E, buff[0], buff[1], buff[2], buff[3], 0xF7]));</l></block><list><block var="angle"/></list></block></script></block-definition><block-definition s="run autobalancing %&apos;canRun&apos;" type="command" category="arduino"><header></header><code></code><translations></translations><inputs><input type="%b"></input></inputs><script><block s="doRun"><block s="reportJSFunction"><list><l>canRun</l></list><l>this.arduino.board.sp.write(new Buffer([0XF0, 0x12, canRun ? 0x01 : 0x00, 0xF7]));</l></block><list><block var="canRun"/></list></block></script></block-definition></blocks>